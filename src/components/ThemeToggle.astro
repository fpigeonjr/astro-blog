---
// ThemeToggle component for switching between light/dark modes
---

<button
	id="theme-toggle"
	type="button"
	aria-label="Toggle dark mode"
	class="theme-toggle"
>
	<svg class="sun-icon" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
		<circle cx="12" cy="12" r="5"></circle>
		<line x1="12" y1="1" x2="12" y2="3"></line>
		<line x1="12" y1="21" x2="12" y2="23"></line>
		<line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
		<line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
		<line x1="1" y1="12" x2="3" y2="12"></line>
		<line x1="21" y1="12" x2="23" y2="12"></line>
		<line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
		<line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
	</svg>
	<svg class="moon-icon" width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
		<path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
	</svg>
</button>

<style>
	.theme-toggle {
		border: none;
		background: none;
		cursor: pointer;
		padding: 0.5em;
		border-radius: 0.25em;
		display: flex;
		align-items: center;
		justify-content: center;
		transition: background-color 0.2s ease;
		color: var(--text-primary);
	}

	.theme-toggle:hover {
		background-color: var(--border);
	}

	.theme-toggle:focus {
		outline: 2px solid var(--accent);
		outline-offset: 2px;
	}

	.sun-icon,
	.moon-icon {
		transition: opacity 0.2s ease;
	}

	:root[data-theme="dark"] .sun-icon,
	:root:not([data-theme]) .sun-icon {
		opacity: 0;
		position: absolute;
	}

	:root[data-theme="dark"] .moon-icon,
	:root:not([data-theme]) .moon-icon {
		opacity: 1;
	}

	:root[data-theme="light"] .sun-icon {
		opacity: 1;
	}

	:root[data-theme="light"] .moon-icon {
		opacity: 0;
		position: absolute;
	}

	@media (prefers-color-scheme: light) {
		:root:not([data-theme]) .sun-icon {
			opacity: 1;
		}

		:root:not([data-theme]) .moon-icon {
			opacity: 0;
			position: absolute;
		}
	}
</style>

<script>
	function getThemePreference() {
		if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
			return localStorage.getItem('theme');
		}
		return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
	}

	function isDark() {
		return getThemePreference() === 'dark';
	}

	function updateIcon(button) {
		const sunIcon = button.querySelector('.sun-icon');
		const moonIcon = button.querySelector('.moon-icon');
		
		if (isDark()) {
			button.setAttribute('aria-label', 'Switch to light mode');
		} else {
			button.setAttribute('aria-label', 'Switch to dark mode');
		}
	}

	function updateTheme() {
		const themePreference = getThemePreference();
		const root = document.documentElement;
		
		if (themePreference === 'dark') {
			root.setAttribute('data-theme', 'dark');
		} else {
			root.setAttribute('data-theme', 'light');
		}

		if (typeof localStorage !== 'undefined') {
			localStorage.setItem('theme', themePreference);
		}
	}

	// Update theme on page load
	updateTheme();

	// Listen for theme toggle clicks
	document.addEventListener('DOMContentLoaded', () => {
		const themeToggle = document.getElementById('theme-toggle');
		if (themeToggle) {
			updateIcon(themeToggle);
			
			themeToggle.addEventListener('click', () => {
				const isCurrentlyDark = isDark();
				const newTheme = isCurrentlyDark ? 'light' : 'dark';
				
				if (typeof localStorage !== 'undefined') {
					localStorage.setItem('theme', newTheme);
				}
				
				updateTheme();
				updateIcon(themeToggle);
			});
		}
	});

	// Listen for system theme changes
	window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {
		if (!localStorage.getItem('theme')) {
			updateTheme();
			const themeToggle = document.getElementById('theme-toggle');
			if (themeToggle) {
				updateIcon(themeToggle);
			}
		}
	});
</script>